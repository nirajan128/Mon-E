[Secion 1 project Setup]:
1. Create two directory frontend and server

1.1 Server:
1. run npm init
2. intsall required packages
3. Instal typescrip as devDependencies npm instal -D typescript: Important because typescript code needs to be transcribed to JS when in production
    install @type express and node
4. create a tsconfig.json file by npx tsc --config, this file will transcribe ts to js, js i sreqired to run the server
5. In the json change outdir value to ./dist, this is the path which will be used as js
6. run npx tsc command which will create a dist folder in it there will be  a indes.js file
7. Important: wherever a new pacakge is insalled, insatall npm install @type/package name as well for ts
8. in the package.json create scripts build and start, build will buld the tsx tojs and start will start the server
9. Dependencies are used in production (runtime), devDependencies are only used for development
10. install rimraff pagkage which will remove the file form a directory
11. in build use rim raff sof the old file gets deleted and new transcribed file is created, rimraf dist && npx tsc"

12. create src folder in it create index.ts file and
13. config: Configuration settings (DB, environment variables, etc.)
   controllers: Request handling logic (business logic for routes)
   middlewares: Custom middleware (authentication, logging, error handling)
   models: Database models (schemas if using MongoDB, PostgreSQL, etc.)
   routes: Route definitions (API endpoints)
   utils/         # Helper functions (reusable utility functions)
14. create .env file,and include it in .gitignore file
15. Connect to Database

----------------------------------------------------------------------------------------------------------------
[Section 2: Setup Frontend]
1. Install Vite React with ts - npm create vite@latest . --template react-ts
2. run npm install and  install axios react-router-dom

 --To test if the backend API url wors,
 delete everthing from APP.tsx, cimport axios, create a state for data import the data usig backend URL and set the state to data and run thethe progran

 3. Create components for login , register form and homepage
 4. in home page use axios to fetch data from backend
 5. in App.tsx use Router>Routes>Route to create routh path and element for login, register and home page

 ----------------------------------------------------------------------------------------------------------------
[Section 3: JWT Authentication]
  Frontend:
  1. Add Bootstrap
  2.Create a Navigation Componenet, Link the the buttons to login and register using Navigate() and onclick
  3. Create a login form, use useSate to set the value of the inputs, add onchange on input
  4. Create a shared component for label, create an interface which define props names and types since typescript i sused
  5. In login Form, use the component, use handleChange method tio change the state of input values 
    after step 6 of backend
  6. Do the same for for register form
  7, create state for loading spinner and error message, which will use shared component
  8. Fetch the data frombackend with post method and data type as application.json,
     pass the user input as json to backend
  9. check the resposne if its ok set the error message to null, if not set the error message
  10. set a if  satement for invalid inputs
  11. set the spinner component based on spinner boolean value 


  Backend:
  1. Install bycrypt and jwtwebtoken
  2. Create a Model folder and dataModel file, create db queries
  3. Goto userRoutes> register and  reqest the body, call the userModal pass the data as param and regsiter the user
  4. **All the tables names and column names must be in lowercase**
  5 Test the route: Goto postman, select POST action, enter the base URL add the route path defined in index.tsx/ route path in userRoutr postman  
    select body , select json, pass all the data s json since the data are from body of the form
  6. Create a ValidDta Middleware that checks if the inputs are valid, inlcude this middle ware in register route

  7. Generate a secret key using node -e "console.log(require('crypto').randomBytes(32).toString('hex'))" and store it in .env file
8. create a utlities folder in it create a jwt generator file, use jwtWbToken and dotenv, create a method that takes user_id as param and returns 
   json token using jwt.sign(payload, secret, )
